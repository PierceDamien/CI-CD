# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

######################################
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
######################################
    - name: Configure CMake
      run: >
        cmake . -DPATCH_VERSION=${{ github.run_number }}
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

######################################
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}



######################################
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure -C ${{ matrix.build_type }}

######################################

    - name: Package
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        mkdir package
        cd package
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --target package --config Release

    - name: Upload Artifact for Release on Windows
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: package-windows-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}/CI-CD-0.0.${{ github.run_number }}-win64.exe

    - name: Upload Artifact for Release on Linux
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-artifact@v4
      with:
        name: package-linux-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}/CI-CD-0.0.${{ github.run_number }}-Linux.tar.gz


##################################

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ steps.strings.outputs.build-output-dir }}
  
####################################

    - name: Upload Windows Release Asset
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}
        asset_name: CI-CD-0.0.${{ github.run_number }}-win64.exe
        asset_content_type: application/executable

    - name: Upload Linux Release Asset
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}
        asset_name: CI-CD-0.0.${{ github.run_number }}-Linux.tar.gz
        asset_content_type: application/gzip